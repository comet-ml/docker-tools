name: Get Latest Tag
description: Get latest parent/global tag for commit
inputs:
  do-checkout:
    description: do repo checkout
    default: 'true'
    required: false
  default-tag:
    description: set tag if nothing found
    default: '0.0.0'
    required: false
  do-tag-create:
    description: create new tag
    default: 'false'
    required: false
  increment:
    description: increment step
    default: '1'
    required: false
outputs:
  tag:
    value: ${{ steps.get-tag.outputs.tag}}
    description: latest tag

runs:
  using: composite
  steps:
    - name: do checkout
      if: inputs.do-checkout != 'false'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        sparse-checkout: |
          version.txt

    - name: get tag
      id: get-tag
      shell: bash
      run: |
        # get latest tag
        set -x +e
        # getting latest parent taggithub.event.number
        eval "$(git describe --tags --long --first-parent ${GITHUB_SHA} | sed -r 's/^((v?([0-9]+))(\.([0-9]+)(\.([0-9]+)(.*))?)?)-([0-9]+)-[0-9a-h]+$/parent_tag=\1;parent_prefix=\2;parent_major=\3;parent_minor=\5;parent_patch=\7;parent_extra=\8;parent_tag_offset=\9;/')"
        echo "offset ${parent_tag_offset}"
        if [ $parent_tag_offset -eq 0 ] ; then
          # this commit already has tag
          echo "tag=${parent_tag}" | tee -a "${GITHUB_OUTPUT}"
          echo "skip_creation=true" | tee -a "${GITHUB_OUTPUT}"
          exit
        fi
        if [ $? -ne 0 ] ; then
          tag_matcher=
        else
          tag_matcher=$parent_prefix
          if [ -n $parent_minor ] ; then
            tag_matcher="${tag_matcher}.${parent_minor}"
          fi
          if [ -n $parent_patch ] ; then
            tag_matcher="${tag_matcher}."
          fi
        fi
        # get the latest tag
        eval "$(git describe --tags --long --match="${tag_matcher}*" HEAD | sed -r 's/^((v?([0-9]+))(\.([0-9]+)(\.([0-9]+)(.*))?)?)-([0-9]+)-[0-9a-h]+$/tag=\1;tag_prefix=\2;tag_major=\3;tag_minor=\5;tag_patch=\7;tag_extra=\8;tag_offset=\9;/')"
        if [ -z "${tag_major}" ] ; then
          new_tag="${{ inputs.default-tag }}"
        else
          # tag found, we need increase patch
          new_tag="${tag_prefix}"
          if [ -z "${tag_minor}" ] ; then
            new_tag="${tag_prefix}.0"
          elif [ -z "${tag_patch}" ] ; then
            new_tag="${tah_prefix}.$(( tag_minor + ${{ inputs.increment }} ))"
          else
            new_tag="${tag_prefix}.${tag_minor}.$(( tag_patch + ${{ inputs.increment }} ))"
          fi
        fi
        echo "tag=${new_tag}" | tee -a "${GITHUB_OUTPUT}"

    - name: create tag
      if: ${{ inputs.do-tag-create != 'false' && steps.get-tag.outputs.skip_creation != 'true' }}
      shell: bash
      env:
        TAG: ${{ steps.get-tag.outputs.tag}}
      run: |
        # do tag create
        set -x
        git tag ${TAG}
        git push origin ${TAG}
